<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LaTeX的一些总结</title>
    <url>/2020/02/03/LaTeX%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="希腊字母表"><a href="#希腊字母表" class="headerlink" title="希腊字母表"></a>希腊字母表</h3><!-- 空一行 -->

<p><img src="/images/xila.png" alt="xila"></p>
<a id="more"></a>

<hr>
<h3 id="一些技巧和特殊符号"><a href="#一些技巧和特殊符号" class="headerlink" title="一些技巧和特殊符号"></a>一些技巧和特殊符号</h3><ul>
<li><p>上标：num_i  -&gt;  $num_i$</p>
</li>
<li><p>下标：e^x -&gt;  $e^x$  （如果下标或上标不明显，可嵌套多层来达到目的）</p>
<ul>
<li>上下标是一串字符的话可用{}括起来表示</li>
</ul>
</li>
<li><p>根号：\sqrt[3]{x} -&gt; $\sqrt[3]{x}$</p>
</li>
<li><p>省略号： 在下面\dots -&gt; $\dots$     在中间\cdots -&gt;  $\cdots$</p>
</li>
<li><p>方框:  \boxed{example}  -&gt;  $\boxed{example}$   (还有一个\fbox与此类似  \fobx{example} -&gt; $\fbox{example}$) </p>
</li>
<li><p>字体加粗:  \mathbf{example} -&gt; $\mathbf{example}$ </p>
</li>
<li><p>字体斜体且加粗:  \boldsymbol{example}  -&gt;  $\boldsymbol{example}$</p>
</li>
<li><p>插入普通文本（自适应大小）:  \text{测试}  -&gt; $\text{测试}$  </p>
<p><img src="/images/specialsign.png" alt="specialsign"></p>
<p><img src="/images/specialsign2.png" alt="specialsign"></p>
</li>
</ul>
<hr>
<h3 id="一些基本符号"><a href="#一些基本符号" class="headerlink" title="一些基本符号"></a>一些基本符号</h3><ul>
<li><p>求和:  \sum_1^n  -&gt;  $\sum_1^n$ </p>
</li>
<li><p>积分:  \int_1^n -&gt; $\int_1^n$   \iint -&gt; $\iint$  以此类推$\cdots$</p>
</li>
<li><p>极限:  \lim_{x \to +\infty}  -&gt; $\lim_{x \to +\infty}$</p>
</li>
<li><p>分数:  \frac{1}{2} -&gt; $\frac{1}{2}$   如果要写多层分数可以用\cfrac （可以避免字母逐层缩小的限制）</p>
</li>
<li><p>组合数: \binom{5}{2} -&gt; $\binom{5}{2}$</p>
</li>
<li><p>下取整: \lfloor{x}\rfloor -&gt;  $\lfloor{x}\rfloor$</p>
</li>
<li><p>下取整: \lceil{x}\rceil -&gt; $\lceil{x}\rceil$</p>
<p><img src="/images/qita.png" alt="qita"></p>
<p><img src="/images/qita2.png" alt="qita2"></p>
</li>
</ul>
<hr>
<h3 id="关于矩阵和行列式"><a href="#关于矩阵和行列式" class="headerlink" title="关于矩阵和行列式"></a>关于矩阵和行列式</h3><ul>
<li>矩阵：用法如下，元素中间使用&amp;来分割同行元素，用\\来换行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">	1 &amp; 2 &amp; 3\\</span><br><span class="line">	4 &amp; 5 &amp; 6\\</span><br><span class="line">	7 &amp; 8 &amp; 9\\</span><br><span class="line">\end&#123;matrix&#125;</span><br></pre></td></tr></table></figure>


<p>$$<br>\begin{matrix}<br>    1 &amp; 2 &amp; 3\\<br>    4 &amp; 5 &amp; 6\\<br>    7 &amp; 8 &amp; 9\\<br>\end{matrix}<br>$$</p>
<ul>
<li>行列式: 与矩阵相似，加上行列式的名字以及左右分割线即可</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A&#x3D;  \left|</span><br><span class="line">	\begin&#123;matrix&#125;</span><br><span class="line">	1 &amp; 2 &amp; 3 \\</span><br><span class="line">	4 &amp; 5 &amp; 6 \\</span><br><span class="line">	7 &amp; 8 &amp; 9 \\</span><br><span class="line">	\end&#123;matrix&#125;</span><br><span class="line">	\right|</span><br></pre></td></tr></table></figure>


<p>$$<br>A=  \left|<br>    \begin{matrix}<br>    1 &amp; 2 &amp; 3 \\<br>    4 &amp; 5 &amp; 6 \\<br>    7 &amp; 8 &amp; 9 \\<br>    \end{matrix}<br>    \right|<br>$$</p>
<hr>
<h3 id="分段函数和方程组"><a href="#分段函数和方程组" class="headerlink" title="分段函数和方程组"></a>分段函数和方程组</h3><ul>
<li>分段函数：写法如下，每一个条件用 表达式和条件之间用 <strong>&amp;</strong> 连接</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f(x)&#x3D;</span><br><span class="line">	\begin&#123;cases&#125;</span><br><span class="line">		x&#x2F;2, &amp; &#123;n&gt;2&#125;\\</span><br><span class="line">		2x , &amp; &#123;n&#x3D;2&#125;\\</span><br><span class="line">		3x , &amp; &#123;n&lt;2&#125;\\</span><br><span class="line">	\end&#123;cases&#125;</span><br></pre></td></tr></table></figure>


<p>$$<br>f(x)=<br>    \begin{cases}<br>        x/2, &amp; {n&gt;2}\\<br>        2x , &amp; {n=2}\\<br>        3x , &amp; {n&lt;2}\\<br>    \end{cases}<br>$$</p>
<ul>
<li>方程组: 写法如下，不是一个对称的，注意left后面为{ ，right后面为. 用\\换行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\left\&#123;</span><br><span class="line">	\begin&#123;array&#125;&#123;&#125;</span><br><span class="line">		a_1x+b_1y+c_1z&#x3D;d_1\\</span><br><span class="line">		a_2x+b_2y+c_2z&#x3D;d_2\\</span><br><span class="line">		a_3x+b_3y+c_3z&#x3D;d_3</span><br><span class="line">	\end&#123;array&#125;</span><br><span class="line">\right.</span><br></pre></td></tr></table></figure>


<p>$$<br>\left\{<br>    \begin{array}{}<br>        a_1x+b_1y+c_1z=d_1\\<br>        a_2x+b_2y+c_2z=d_2\\<br>        a_3x+b_3y+c_3z=d_3<br>    \end{array}<br>\right.<br>$$</p>
<hr>
<p><strong>Ps: 上面的矩阵，行列式，分段函数和方程组有一个问题需要我们注意，因为反斜杠 \ 需要转义，那么对于每次换行需要两个\\ ，也就是说你打的时候总需要打四个，对于前面声明begin和end，或者left和right前面的反斜杠，你打的时候就要打两个，对于markdown编辑器里面编辑LaTeX可能会自适应，不会自动转义，但是我们推博客的时候，一定要注意这个地方，不然会显示错误。也就是对于上述描述中的反斜杠，都要按两倍来写</strong></p>
<hr>
<p>先总结这么多，后面那些进阶的用到了再总结。</p>
<p>参考文献:</p>
<ul>
<li><a href="https://blog.csdn.net/happyday_d/article/details/83715440" target="_blank" rel="noopener">Typora中利用LaTeX 插入数学公式</a></li>
<li><a href="https://www.jianshu.com/p/22117d964baf" target="_blank" rel="noopener">LATEX 公式总结</a></li>
</ul>
]]></content>
      <categories>
        <category>不务正业</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeforcesER81</title>
    <url>/2020/02/02/CodeforcesER81/</url>
    <content><![CDATA[<h3 id="A-Display-The-Number"><a href="#A-Display-The-Number" class="headerlink" title="A : Display The Number"></a>A : <a href="https://codeforces.com/contest/1295/problem/A" target="_blank" rel="noopener">Display The Number</a></h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>​    用一定数目的灯管，显示尽可能大的数</p>
<p><img src="https://s2.ax1x.com/2020/02/02/1te6Re.md.png" alt="A"></p>
<a id="more"></a>

<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>​    因为位数多的肯定更大，所以肯定用尽量少的灯管搭建单个数字更好，最少的两个分别是两个灯管显示的1，以及三个灯管显示的7，所以就是尽可能的用1，如果最后剩余正好三个就显示7。这就转化成了判断奇数还是偶数的题，奇数就显示7111····，偶数就是1111···。注意要把7放在前面（我就踩坑了）。</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">	<span class="keyword">while</span>(t--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> p=n/<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++) <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"7"</span>);</span><br><span class="line">			n-=<span class="number">3</span>;</span><br><span class="line">			<span class="keyword">int</span> p=n/<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++) <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="B-Infinite-Prefixes"><a href="#B-Infinite-Prefixes" class="headerlink" title="B : Infinite Prefixes"></a>B : <a href="https://codeforces.com/contest/1295/problem/B" target="_blank" rel="noopener">Infinite Prefixes</a></h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>​    给定一段01字符串 <strong>s</strong> 为循环节，得到无限循环的01字符串 <strong>t</strong>，求 <strong>t</strong> 中有多少前缀满足0个数-1个数等于期望值<strong>x</strong> （空前缀也算是一个前缀）</p>
<blockquote>
<p>前缀：例如”abcd”的前缀包括 “ “,”a”,”ab”,”abc”,”abcd”.</p>
</blockquote>
<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>首先我们先记录循环节 <strong>s</strong> 中每个位置对应的01个数差，记为$num_i，i\in[1,n]$ （ <strong>s</strong> 长度记为n） </p>
<ul>
<li>首先我们可以发现当 <strong>x=0</strong> 的时候，空前缀也会有贡献，因此不能忽略空前缀。</li>
<li>如果循环节 <strong>s</strong> 的01数相等，那么我们可以发现最后循环节一位$num_n$总为0，那么可以分两种情况来讨论<ul>
<li>如果循环节中存在大于等于1个前缀满足期望值x，那么就有无限个满足，因此输出-1</li>
<li>如果循环节 <strong>s</strong> 中不存在满足期望值的前缀，那么 <strong>t</strong> 中也一定不存在</li>
</ul>
</li>
</ul>
<ul>
<li>再来看一般情况，如果一个前缀中包含多个循环节 <strong>s</strong> ,那么前面每个循环节对于最终01个数差的贡献总为$num_n$，因此我们可以用所期望的值 <strong>x</strong>，利用1~n 循环减去每一位的 $num_i$，如果所得是$num_n$的非负倍数，那么就是符合期望的，否则不是。(本来一直这里不太明白，后来发现对于循环节中的每一个位置，在后续循环的过程中，如果$num_n$不为0，那么这个位置每次对应的值总是唯一的)</li>
</ul>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> t,cnt,n,x;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">	<span class="keyword">while</span>(t--)</span><br><span class="line">	&#123;</span><br><span class="line">		cnt=<span class="number">0</span>;</span><br><span class="line">		flag=<span class="literal">false</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;x);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i]==<span class="string">'0'</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				num[i]=num[i<span class="number">-1</span>]+<span class="number">1</span>;				</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> num[i]=num[i<span class="number">-1</span>]<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">if</span>(num[i]==x) flag=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> p=num[n];</span><br><span class="line">		<span class="keyword">if</span>(p==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(flag==<span class="literal">true</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> m=x-num[i];</span><br><span class="line">				<span class="keyword">if</span>(m%p==<span class="number">0</span>&amp;&amp;m/p&gt;=<span class="number">0</span>) </span><br><span class="line">				&#123;</span><br><span class="line">					cnt++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(x==<span class="number">0</span>) cnt++;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="C-Obtain-The-String"><a href="#C-Obtain-The-String" class="headerlink" title="C : Obtain The String"></a>C : <a href="https://codeforces.com/contest/1295/problem/C" target="_blank" rel="noopener">Obtain The String</a></h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>​    给定字符串 <strong>s</strong> 和 <strong>t</strong> ，每次从 <strong>s</strong> 中选取子序列放入起始为空串的 <strong>z</strong> 后，问最少需要多少次操作使得 <strong>z=t</strong></p>
<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>​    看了小姜老师的博客解法说是贪心，想了好一会，好像确实是可以贪心的···? 设置两个指针从 <strong>s</strong> 和 <strong>t</strong> 串的头部开始扫，对于 <strong>t</strong> 串中的每个字母，循环扫 <strong>s</strong> 串在其中找与它相同的，最终的答案就是扫 <strong>s</strong> 串的次数。(小姜老师说这个实质上就是每次尽可能找尽可能多的后缀，仔细想想确实是这样。)不过这么一直暴力扫下去肯定不是最优的方法，想办法去优化。还是借鉴大佬的想法用一个lens*26的跳表，然后O(lent)扫一遍 <strong>t</strong> 即可.</p>
<blockquote>
<p>跳表nxt的作用，用于寻找下一个所寻找字符在s中的位置。</p>
<p>nxt[x][y]用于指向从x位置开始下一个y的位置+1 （next在C++属于保留字，注意不要踩坑）</p>
</blockquote>
<h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn],t[maxn];</span><br><span class="line"><span class="keyword">int</span> nxt[maxn][<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> p,lens,lent;</span><br><span class="line"><span class="keyword">int</span> pos,ans; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p);</span><br><span class="line">	<span class="keyword">while</span>(p--)</span><br><span class="line">	&#123;</span><br><span class="line">		ans=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,t);</span><br><span class="line">		lent=<span class="built_in">strlen</span>(t),lens=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//		printf("%d",lens);</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;<span class="number">26</span>;c++)</span><br><span class="line">		&#123;</span><br><span class="line">			nxt[lens+<span class="number">1</span>][c]=<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=lens;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[i]-<span class="string">'a'</span>==c)</span><br><span class="line">				&#123;</span><br><span class="line">					nxt[i][c]=i+<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> nxt[i][c]=nxt[i+<span class="number">1</span>][c];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		pos=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lent;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			pos=nxt[pos][(<span class="keyword">int</span>)t[i]-<span class="string">'a'</span>];</span><br><span class="line">			<span class="keyword">if</span>(pos==<span class="number">-1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				ans++;</span><br><span class="line">				pos=<span class="number">1</span>;</span><br><span class="line">				pos=nxt[pos][(<span class="keyword">int</span>)t[i]-<span class="string">'a'</span>];</span><br><span class="line">				<span class="keyword">if</span>(pos==<span class="number">-1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					ans=<span class="number">-1</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
</search>
